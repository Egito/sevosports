/**
 * JavaScript para Gerenciamento Frontend de Papéis de Usuários
 * Sevo Eventos Plugin
 */

(function($) {
    'use strict';
    
    // Objeto principal para gerenciamento de papéis
    const SevoPapeis = {
        
        // Configurações
        config: {
            nonce: sevoPapeisData.nonce,
            ajaxUrl: sevoPapeisData.ajax_url,
            currentUserId: sevoPapeisData.current_user_id,
            isAdmin: sevoPapeisData.is_admin,
            isEditor: sevoPapeisData.is_editor,
            strings: sevoPapeisData.strings
        },
        
        // Cache de elementos DOM
        elements: {
            container: null,
            listContainer: null,
            modal: null,
            form: null,
            loadingOverlay: null,
            filters: {
                organization: null,
                role: null,
                applyBtn: null
            }
        },
        
        // Estado atual
        state: {
            currentFilters: {
                organizacao_id: '',
                papel: ''
            },
            isLoading: false,
            availableUsers: [],
            availableOrganizations: []
        },
        
        // Inicialização
        init: function() {
            this.cacheDOMElements();
            this.bindEvents();
            this.loadInitialData();
        },
        
        // Cache elementos DOM
        cacheDOMElements: function() {
            this.elements.container = $('#sevo-papeis-container');
            this.elements.listContainer = $('#sevo-papeis-list-container');
            this.elements.modal = $('#sevo-user-role-modal');
            this.elements.form = $('#sevo-user-role-form');
            this.elements.loadingOverlay = $('#sevo-loading-overlay');
            
            // Filtros
            this.elements.filters.organization = $('#sevo-filter-organization');
            this.elements.filters.role = $('#sevo-filter-role');
            this.elements.filters.applyBtn = $('#sevo-apply-filters');
        },
        
        // Vincular eventos\n        bindEvents: function() {\n            const self = this;\n            \n            // Botão adicionar usuário\n            $('#sevo-add-user-role-btn').on('click', function() {\n                self.openModal('create');\n            });\n            \n            // Aplicar filtros\n            this.elements.filters.applyBtn.on('click', function() {\n                self.applyFilters();\n            });\n            \n            // Filtros com Enter\n            this.elements.filters.organization.on('keypress', function(e) {\n                if (e.which === 13) {\n                    self.applyFilters();\n                }\n            });\n            \n            // Eventos do modal\n            this.bindModalEvents();\n            \n            // Eventos da lista\n            this.bindListEvents();\n        },\n        \n        // Eventos do modal\n        bindModalEvents: function() {\n            const self = this;\n            \n            // Fechar modal\n            $('.sevo-modal-close, #sevo-user-role-cancel').on('click', function() {\n                self.closeModal();\n            });\n            \n            // Clique fora do modal\n            this.elements.modal.on('click', function(e) {\n                if (e.target === this) {\n                    self.closeModal();\n                }\n            });\n            \n            // Salvar\n            $('#sevo-user-role-save').on('click', function() {\n                self.saveUserRole();\n            });\n            \n            // Escape para fechar\n            $(document).on('keydown', function(e) {\n                if (e.keyCode === 27 && self.elements.modal.is(':visible')) {\n                    self.closeModal();\n                }\n            });\n        },\n        \n        // Eventos da lista\n        bindListEvents: function() {\n            const self = this;\n            \n            // Eventos delegados para botões que são criados dinamicamente\n            this.elements.listContainer.on('click', '.sevo-edit-role', function() {\n                const data = $(this).data();\n                self.openModal('edit', data);\n            });\n            \n            this.elements.listContainer.on('click', '.sevo-remove-role', function() {\n                const id = $(this).data('id');\n                self.removeUserRole(id);\n            });\n        },\n        \n        // Carregar dados iniciais\n        loadInitialData: function() {\n            this.loadOrganizationOptions();\n            this.loadUserRoles();\n        },\n        \n        // Carregar opções de organizações\n        loadOrganizationOptions: function() {\n            const self = this;\n            \n            $.ajax({\n                url: this.config.ajaxUrl,\n                type: 'POST',\n                data: {\n                    action: 'sevo_frontend_get_editor_organizations',\n                    nonce: this.config.nonce\n                },\n                success: function(response) {\n                    if (response.success) {\n                        self.elements.filters.organization.html(response.data.options);\n                        \n                        // Também atualizar as opções do modal se existir\n                        $('#user-role-organization-id').html(\n                            response.data.options.replace('Todas as organizações', 'Selecione uma organização')\n                        );\n                    }\n                },\n                error: function() {\n                    self.showError(self.config.strings.error);\n                }\n            });\n        },\n        \n        // Carregar lista de papéis\n        loadUserRoles: function() {\n            const self = this;\n            \n            if (this.state.isLoading) return;\n            \n            this.state.isLoading = true;\n            this.showLoading();\n            \n            $.ajax({\n                url: this.config.ajaxUrl,\n                type: 'POST',\n                data: {\n                    action: 'sevo_frontend_get_user_roles',\n                    nonce: this.config.nonce,\n                    organizacao_id: this.state.currentFilters.organizacao_id,\n                    papel: this.state.currentFilters.papel\n                },\n                success: function(response) {\n                    self.state.isLoading = false;\n                    self.hideLoading();\n                    \n                    if (response.success) {\n                        self.elements.listContainer.html(response.data.html);\n                    } else {\n                        self.showError(response.data || self.config.strings.error);\n                    }\n                },\n                error: function() {\n                    self.state.isLoading = false;\n                    self.hideLoading();\n                    self.showError(self.config.strings.error);\n                }\n            });\n        },\n        \n        // Aplicar filtros\n        applyFilters: function() {\n            this.state.currentFilters.organizacao_id = this.elements.filters.organization.val();\n            this.state.currentFilters.papel = this.elements.filters.role.val();\n            this.loadUserRoles();\n        },\n        \n        // Abrir modal\n        openModal: function(action, data) {\n            const self = this;\n            \n            // Carregar usuários disponíveis se necessário\n            if (action === 'create') {\n                this.loadAvailableUsers();\n            }\n            \n            // Configurar modal\n            if (action === 'edit' && data) {\n                $('#sevo-user-role-modal-title').text('Editar Papel');\n                $('#user-role-id').val(data.id);\n                $('#user-role-action').val('edit');\n                $('#user-role-user-id').val(data.usuarioId).prop('disabled', true);\n                $('#user-role-organization-id').val(data.organizacaoId).prop('disabled', true);\n                $('#user-role-papel').val(data.papel);\n                $('#user-role-observacoes').val(data.observacoes);\n            } else {\n                $('#sevo-user-role-modal-title').text('Adicionar Usuário');\n                $('#user-role-id').val('');\n                $('#user-role-action').val('create');\n                $('#user-role-user-id').prop('disabled', false);\n                $('#user-role-organization-id').prop('disabled', false);\n                this.elements.form[0].reset();\n            }\n            \n            this.elements.modal.fadeIn(300);\n            $('body').addClass('sevo-modal-open');\n        },\n        \n        // Fechar modal\n        closeModal: function() {\n            this.elements.modal.fadeOut(300);\n            $('body').removeClass('sevo-modal-open');\n            this.elements.form[0].reset();\n        },\n        \n        // Carregar usuários disponíveis\n        loadAvailableUsers: function() {\n            const self = this;\n            \n            $.ajax({\n                url: this.config.ajaxUrl,\n                type: 'POST',\n                data: {\n                    action: 'sevo_frontend_get_available_users',\n                    nonce: this.config.nonce\n                },\n                success: function(response) {\n                    if (response.success) {\n                        $('#user-role-user-id').html(response.data.options);\n                    }\n                }\n            });\n        },\n        \n        // Salvar papel de usuário\n        saveUserRole: function() {\n            const self = this;\n            const formData = new FormData(this.elements.form[0]);\n            const action = $('#user-role-action').val();\n            \n            // Validação básica\n            if (!formData.get('usuario_id') || !formData.get('organizacao_id') || !formData.get('papel')) {\n                this.showError('Por favor, preencha todos os campos obrigatórios.');\n                return;\n            }\n            \n            // Preparar dados\n            const ajaxData = {\n                nonce: this.config.nonce\n            };\n            \n            // Adicionar campos do formulário\n            for (let [key, value] of formData.entries()) {\n                ajaxData[key] = value;\n            }\n            \n            // Definir ação AJAX\n            if (action === 'edit') {\n                ajaxData.action = 'sevo_frontend_update_user_role';\n            } else {\n                ajaxData.action = 'sevo_frontend_add_user_role';\n            }\n            \n            this.showLoading();\n            \n            $.ajax({\n                url: this.config.ajaxUrl,\n                type: 'POST',\n                data: ajaxData,\n                success: function(response) {\n                    self.hideLoading();\n                    \n                    if (response.success) {\n                        self.showSuccess(response.data.message);\n                        self.closeModal();\n                        self.loadUserRoles();\n                    } else {\n                        self.showError(response.data || self.config.strings.error);\n                    }\n                },\n                error: function() {\n                    self.hideLoading();\n                    self.showError(self.config.strings.error);\n                }\n            });\n        },\n        \n        // Remover papel de usuário\n        removeUserRole: function(id) {\n            const self = this;\n            \n            if (!confirm(this.config.strings.confirm_remove)) {\n                return;\n            }\n            \n            this.showLoading();\n            \n            $.ajax({\n                url: this.config.ajaxUrl,\n                type: 'POST',\n                data: {\n                    action: 'sevo_frontend_remove_user_role',\n                    nonce: this.config.nonce,\n                    id: id\n                },\n                success: function(response) {\n                    self.hideLoading();\n                    \n                    if (response.success) {\n                        self.showSuccess(response.data.message);\n                        self.loadUserRoles();\n                    } else {\n                        self.showError(response.data || self.config.strings.error);\n                    }\n                },\n                error: function() {\n                    self.hideLoading();\n                    self.showError(self.config.strings.error);\n                }\n            });\n        },\n        \n        // Mostrar loading\n        showLoading: function() {\n            this.elements.loadingOverlay.show();\n        },\n        \n        // Esconder loading\n        hideLoading: function() {\n            this.elements.loadingOverlay.hide();\n        },\n        \n        // Mostrar erro\n        showError: function(message) {\n            this.showNotification(message, 'error');\n        },\n        \n        // Mostrar sucesso\n        showSuccess: function(message) {\n            this.showNotification(message, 'success');\n        },\n        \n        // Mostrar notificação\n        showNotification: function(message, type) {\n            const notification = $('<div class=\"sevo-notification sevo-notification-' + type + '\">');\n            notification.html('<span>' + message + '</span><button class=\"sevo-notification-close\">&times;</button>');\n            \n            $('body').append(notification);\n            \n            // Auto-remover após 5 segundos\n            setTimeout(function() {\n                notification.fadeOut(300, function() {\n                    $(this).remove();\n                });\n            }, 5000);\n            \n            // Botão fechar\n            notification.find('.sevo-notification-close').on('click', function() {\n                notification.fadeOut(300, function() {\n                    $(this).remove();\n                });\n            });\n        }\n    };\n    \n    // Expor globalmente para uso em outras partes\n    window.SevoPapeis = SevoPapeis;\n    \n    // Inicializar quando documento estiver pronto\n    $(document).ready(function() {\n        // Verificar se estamos na página correta\n        if ($('#sevo-papeis-container').length > 0) {\n            SevoPapeis.init();\n        }\n    });\n    \n})(jQuery);